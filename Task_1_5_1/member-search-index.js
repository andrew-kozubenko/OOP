memberSearchIndex = [{"p":"org.example.types","c":"ComplexNumber","l":"add(ComplexNumber)","url":"add(org.example.types.ComplexNumber)"},{"p":"org.example.functions.forcomplex","c":"ComplexCos","l":"apply(ComplexNumber, boolean)","url":"apply(org.example.types.ComplexNumber,boolean)"},{"p":"org.example.functions.forcomplex","c":"ComplexLog","l":"apply(ComplexNumber, boolean)","url":"apply(org.example.types.ComplexNumber,boolean)"},{"p":"org.example.functions.forcomplex","c":"ComplexPow","l":"apply(ComplexNumber, boolean)","url":"apply(org.example.types.ComplexNumber,boolean)"},{"p":"org.example.functions.forcomplex","c":"ComplexSin","l":"apply(ComplexNumber, boolean)","url":"apply(org.example.types.ComplexNumber,boolean)"},{"p":"org.example.functions.forcomplex","c":"ComplexSqrt","l":"apply(ComplexNumber, boolean)","url":"apply(org.example.types.ComplexNumber,boolean)"},{"p":"org.example.operators.forcomplex","c":"ComplexAddition","l":"apply(ComplexNumber, ComplexNumber)","url":"apply(org.example.types.ComplexNumber,org.example.types.ComplexNumber)"},{"p":"org.example.operators.forcomplex","c":"ComplexDivision","l":"apply(ComplexNumber, ComplexNumber)","url":"apply(org.example.types.ComplexNumber,org.example.types.ComplexNumber)"},{"p":"org.example.operators.forcomplex","c":"ComplexMultiplication","l":"apply(ComplexNumber, ComplexNumber)","url":"apply(org.example.types.ComplexNumber,org.example.types.ComplexNumber)"},{"p":"org.example.operators.forcomplex","c":"ComplexSubtraction","l":"apply(ComplexNumber, ComplexNumber)","url":"apply(org.example.types.ComplexNumber,org.example.types.ComplexNumber)"},{"p":"org.example.functions.fordouble","c":"DoubleCos","l":"apply(Double, boolean)","url":"apply(java.lang.Double,boolean)"},{"p":"org.example.functions.fordouble","c":"DoubleLog","l":"apply(Double, boolean)","url":"apply(java.lang.Double,boolean)"},{"p":"org.example.functions.fordouble","c":"DoublePow","l":"apply(Double, boolean)","url":"apply(java.lang.Double,boolean)"},{"p":"org.example.functions.fordouble","c":"DoubleSin","l":"apply(Double, boolean)","url":"apply(java.lang.Double,boolean)"},{"p":"org.example.functions.fordouble","c":"DoubleSqrt","l":"apply(Double, boolean)","url":"apply(java.lang.Double,boolean)"},{"p":"org.example.operators.fordouble","c":"DoubleAddition","l":"apply(Double, Double)","url":"apply(java.lang.Double,java.lang.Double)"},{"p":"org.example.operators.fordouble","c":"DoubleDivision","l":"apply(Double, Double)","url":"apply(java.lang.Double,java.lang.Double)"},{"p":"org.example.operators.fordouble","c":"DoubleMultiplication","l":"apply(Double, Double)","url":"apply(java.lang.Double,java.lang.Double)"},{"p":"org.example.operators.fordouble","c":"DoubleSubtraction","l":"apply(Double, Double)","url":"apply(java.lang.Double,java.lang.Double)"},{"p":"org.example.interfaces","c":"Function","l":"apply(T, boolean)","url":"apply(T,boolean)"},{"p":"org.example.interfaces","c":"Operator","l":"apply(T, T)","url":"apply(T,T)"},{"p":"org.example","c":"Calculator","l":"Calculator()","url":"%3Cinit%3E()"},{"p":"org.example.operators.forcomplex","c":"ComplexAddition","l":"ComplexAddition()","url":"%3Cinit%3E()"},{"p":"org.example","c":"ComplexCalculator","l":"ComplexCalculator()","url":"%3Cinit%3E()"},{"p":"org.example.functions.forcomplex","c":"ComplexCos","l":"ComplexCos()","url":"%3Cinit%3E()"},{"p":"org.example.operators.forcomplex","c":"ComplexDivision","l":"ComplexDivision()","url":"%3Cinit%3E()"},{"p":"org.example.functions.forcomplex","c":"ComplexFunctionFactory","l":"ComplexFunctionFactory()","url":"%3Cinit%3E()"},{"p":"org.example.functions.forcomplex","c":"ComplexLog","l":"ComplexLog()","url":"%3Cinit%3E()"},{"p":"org.example.operators.forcomplex","c":"ComplexMultiplication","l":"ComplexMultiplication()","url":"%3Cinit%3E()"},{"p":"org.example.types","c":"ComplexNumber","l":"ComplexNumber(double, double)","url":"%3Cinit%3E(double,double)"},{"p":"org.example.operators.forcomplex","c":"ComplexOperatorFactory","l":"ComplexOperatorFactory()","url":"%3Cinit%3E()"},{"p":"org.example.functions.forcomplex","c":"ComplexPow","l":"ComplexPow()","url":"%3Cinit%3E()"},{"p":"org.example.functions.forcomplex","c":"ComplexSin","l":"ComplexSin()","url":"%3Cinit%3E()"},{"p":"org.example.functions.forcomplex","c":"ComplexSqrt","l":"ComplexSqrt()","url":"%3Cinit%3E()"},{"p":"org.example.operators.forcomplex","c":"ComplexSubtraction","l":"ComplexSubtraction()","url":"%3Cinit%3E()"},{"p":"org.example.types","c":"ComplexNumber","l":"cos(ComplexNumber, boolean)","url":"cos(org.example.types.ComplexNumber,boolean)"},{"p":"org.example.functions.forcomplex","c":"ComplexFunctionFactory","l":"createOperator(String)","url":"createOperator(java.lang.String)"},{"p":"org.example.functions.fordouble","c":"DoubleFunctionFactory","l":"createOperator(String)","url":"createOperator(java.lang.String)"},{"p":"org.example.operators.forcomplex","c":"ComplexOperatorFactory","l":"createOperator(String)","url":"createOperator(java.lang.String)"},{"p":"org.example.operators.fordouble","c":"DoubleOperatorFactory","l":"createOperator(String)","url":"createOperator(java.lang.String)"},{"p":"org.example.types","c":"ComplexNumber","l":"divide(ComplexNumber)","url":"divide(org.example.types.ComplexNumber)"},{"p":"org.example.operators.fordouble","c":"DoubleAddition","l":"DoubleAddition()","url":"%3Cinit%3E()"},{"p":"org.example","c":"DoubleCalculator","l":"DoubleCalculator()","url":"%3Cinit%3E()"},{"p":"org.example.functions.fordouble","c":"DoubleCos","l":"DoubleCos()","url":"%3Cinit%3E()"},{"p":"org.example.operators.fordouble","c":"DoubleDivision","l":"DoubleDivision()","url":"%3Cinit%3E()"},{"p":"org.example.functions.fordouble","c":"DoubleFunctionFactory","l":"DoubleFunctionFactory()","url":"%3Cinit%3E()"},{"p":"org.example.functions.fordouble","c":"DoubleLog","l":"DoubleLog()","url":"%3Cinit%3E()"},{"p":"org.example.operators.fordouble","c":"DoubleMultiplication","l":"DoubleMultiplication()","url":"%3Cinit%3E()"},{"p":"org.example.operators.fordouble","c":"DoubleOperatorFactory","l":"DoubleOperatorFactory()","url":"%3Cinit%3E()"},{"p":"org.example.functions.fordouble","c":"DoublePow","l":"DoublePow()","url":"%3Cinit%3E()"},{"p":"org.example.functions.fordouble","c":"DoubleSin","l":"DoubleSin()","url":"%3Cinit%3E()"},{"p":"org.example.functions.fordouble","c":"DoubleSqrt","l":"DoubleSqrt()","url":"%3Cinit%3E()"},{"p":"org.example.operators.fordouble","c":"DoubleSubtraction","l":"DoubleSubtraction()","url":"%3Cinit%3E()"},{"p":"org.example","c":"ComplexCalculator","l":"evaluateExpressionComplex(String, boolean)","url":"evaluateExpressionComplex(java.lang.String,boolean)"},{"p":"org.example","c":"DoubleCalculator","l":"evaluateExpressionDouble(String, boolean)","url":"evaluateExpressionDouble(java.lang.String,boolean)"},{"p":"org.example.types","c":"ComplexNumber","l":"getImag()"},{"p":"org.example.types","c":"ComplexNumber","l":"getReal()"},{"p":"org.example","c":"Calculator","l":"isComplexNumber(String)","url":"isComplexNumber(java.lang.String)"},{"p":"org.example","c":"Calculator","l":"isFunction(String)","url":"isFunction(java.lang.String)"},{"p":"org.example","c":"Calculator","l":"isNumber(String)","url":"isNumber(java.lang.String)"},{"p":"org.example","c":"Calculator","l":"isOperator(String)","url":"isOperator(java.lang.String)"},{"p":"org.example.types","c":"ComplexNumber","l":"isZero()"},{"p":"org.example.types","c":"ComplexNumber","l":"log(ComplexNumber)","url":"log(org.example.types.ComplexNumber)"},{"p":"org.example","c":"Main","l":"Main()","url":"%3Cinit%3E()"},{"p":"org.example","c":"Main","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"org.example.types","c":"ComplexNumber","l":"multiply(ComplexNumber)","url":"multiply(org.example.types.ComplexNumber)"},{"p":"org.example.types","c":"ComplexNumber","l":"pow(ComplexNumber, double)","url":"pow(org.example.types.ComplexNumber,double)"},{"p":"org.example.types","c":"ComplexNumber","l":"sin(ComplexNumber, boolean)","url":"sin(org.example.types.ComplexNumber,boolean)"},{"p":"org.example.types","c":"ComplexNumber","l":"sqrt(ComplexNumber)","url":"sqrt(org.example.types.ComplexNumber)"},{"p":"org.example.types","c":"ComplexNumber","l":"subtract(ComplexNumber)","url":"subtract(org.example.types.ComplexNumber)"},{"p":"org.example.types","c":"ComplexNumber","l":"toString()"}]